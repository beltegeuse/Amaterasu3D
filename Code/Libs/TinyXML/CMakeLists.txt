SET(LIB_TINYXML_SRCS
	tinyxml.cpp
	tinystr.cpp
	tinyxmlerror.cpp
	tinyxmlparser.cpp
)

SET(LIB_TINYXML_HEADERS
  tinystr.h 
  tinyxml.h
)

INCLUDE_DIRECTORIES(
	${CMAKE_CURRENT_SOURCE_DIR}
)

SET(TINYXML_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR})

IF(MSVC)
ADD_LIBRARY(tinyxml STATIC ${LIB_TINYXML_SRCS})
ELSE()
ADD_LIBRARY(tinyxml SHARED ${LIB_TINYXML_SRCS})
ENDIF()

install(TARGETS tinyxml 
  RUNTIME DESTINATION ${PROJECT_BUILD_PATH}
  LIBRARY DESTINATION ${PROJECT_BUILD_PATH}
  ARCHIVE DESTINATION ${PROJECT_BUILD_PATH}
)


# 
# Pour la copie des headers
#

#SET(HEADER_IN_INCLUDE_DIR "")
#FOREACH(header ${LIB_TINYXML_HEADERS})
#  GET_FILENAME_COMPONENT(headerName ${header} NAME) 
#  ADD_CUSTOM_COMMAND(
#    OUTPUT ${SEA_INCLUDE}/TinyXML/${headerName}
#    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${header} ${SEA_INCLUDE}/TinyXML/${headerName}
#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${header}
#    )
#  SET(HEADER_IN_INCLUDE_DIR ${HEADER_IN_INCLUDE_DIR} ${SEA_INCLUDE}/TinyXML/${headerName}
#    )
#ENDFOREACH(header)

#ADD_CUSTOM_TARGET(headerTinyXML ALL
#  DEPENDS ${HEADER_IN_INCLUDE_DIR}
# )
