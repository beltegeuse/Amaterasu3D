

/*
NEED DEFINE
	* NB_CASCADE

*/

//vec4 sample3D(in sampler2D s, in vec3 coords){
//  float CellCount = (LPVCellSize.w-1.0);
//  vec3 c = clamp(coords,0.0,1.0) * CellCount;
//
//  vec3 c1 = vec3(c.x,c.y,floor(c.z));
//  vec3 c2 = clamp(c1+vec3(0.0,0.0,1.0),0.0,CellCount);
//
//	float row = floor(c1.z / LPVSize.z);
//	float col = c1.z - (row*LPVSize.z);
//	vec2 spos1 = vec2(col * LPVCellSize.w + c1.x,row * LPVCellSize.w + c1.y) / LPVSize.xy;
//
//	row = floor(c2.z / LPVSize.z);
//	col = c2.z - (row*LPVSize.z);
//	vec2 spos2 = vec2(col * LPVCellSize.w + c2.x,row * LPVCellSize.w + c2.y) / LPVSize.xy;
//
//	vec4 s1 = texture2D(s,spos1);
//	vec4 s2 = texture2D(s,spos2);
//
//	return mix(s1,s2,c.z-c1.z);
//}

// Trilinear interpolation
// \position : It's grid position
//TODO: Add border support
vec4 TrilinearInterpolation(sampler2D s, vec3 Position, vec3 Normal, in int level)
{
	vec3 IndexedPosition = floor(Position);
	vec3 Offset = Position - IndexedPosition;

	vec4 v1i1 = texture(s, Convert3DTo2DTexcoord(IndexedPosition,level));
	vec4 v2i1 = texture(s, Convert3DTo2DTexcoord(IndexedPosition + vec3(0,0,1),level));
	vec4 i1 = v1i1*(1-Offset.z)+v2i1*Offset.z;

	vec4 v1i2 = texture(s, Convert3DTo2DTexcoord(IndexedPosition + vec3(0,1,0),level));
	vec4 v2i2 = texture(s, Convert3DTo2DTexcoord(IndexedPosition + vec3(0,1,1),level));
	vec4 i2 = v1i2*(1-Offset.z)+v2i2*Offset.z;

	vec4 v1j1 = texture(s, Convert3DTo2DTexcoord(IndexedPosition + vec3(1,0,0),level));
	vec4 v2j1 = texture(s, Convert3DTo2DTexcoord(IndexedPosition + vec3(1,0,1),level));
	vec4 j1 = v1j1*(1-Offset.z)+v2j1*Offset.z;

	vec4 v1j2 = texture(s, Convert3DTo2DTexcoord(IndexedPosition + vec3(1,1,0),level));
	vec4 v2j2 = texture(s, Convert3DTo2DTexcoord(IndexedPosition + vec3(1,1,1),level));
	vec4 j2 = v1j2*(1-Offset.z)+v2j2*Offset.z;

	vec4 w1 = i1*(1 - Offset.y) + i2 * Offset.y;
	vec4 w2 = j1*(1 - Offset.y) + j2 * Offset.y;

	return w1*(1 - Offset.x) + w2 * Offset.x;
}

vec4 TrilinearInterpolationWorld(sampler2D s, vec3 Position, vec3 Normal, in int cascadeID)
{
	vec3 PositionGrid = ((Position- 0.5*vec3(LPVCellSize[cascadeID])) - LPVPosition[cascadeID]) / vec3(LPVCellSize[cascadeID]);
	return TrilinearInterpolation(s,PositionGrid, Normal,cascadeID);
}


const float factorNorm = 0.6;
vec4 ComputeIndirectLighting(in vec3 Position, in vec3 Normal)
{
	vec4 ReturnValue = vec4(0.0,0.0,0.0,1.0);
	int i;
	vec4 CoeffGridRed;
	vec4 CoeffGridGreen;
	vec4 CoeffGridBlue;
	vec4 SHEv = SH_evaluate(-Normal);
	for( i = 0; i < {{NB_CASCADE}}; i++)
	{
		// Get Grid Coordinates
		if(IsNotInGrid(floor((Position.xyz - LPVPosition[i].xyz) / vec3(LPVCellSize[i]))))
			return ReturnValue;

		// Get texture coordinates
		//vec2 TexCoordGrid = Convert3DTo2DTexcoord(Position);
		CoeffGridRed = TrilinearInterpolationWorld(GridRed,Position, Normal, i); ///< And get coeff value
		CoeffGridGreen = TrilinearInterpolationWorld(GridGreen,Position, Normal, i);
		CoeffGridBlue = TrilinearInterpolationWorld(GridBlue,Position, Normal, i);

	
		ReturnValue +=  vec4(max(dot(CoeffGridRed,SHEv) / 3.14,0.0) *factorNorm,
				 max(dot(CoeffGridGreen,SHEv) / 3.14,0.0) * factorNorm,
				 max(dot(CoeffGridBlue,SHEv) / 3.14,0.0) * factorNorm,0.0);
	}
	
	return ReturnValue;
}
